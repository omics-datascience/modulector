# Generated by Django 3.1.13 on 2023-01-04 18:55
import os
import pandas as pd
import pathlib
from django.db import migrations, connection
from fasta_reader import read_fasta
from datetime import datetime


def import_mirbase(apps, _schema_editor):
    """Import the mirBase database to the tables: modulector_mirna and modulector_mirbaseidmirna"""
    parent_dir = pathlib.Path(__file__).parent.absolute().parent
    db_mature_path = os.path.join(parent_dir, "files/mature.fa")  # Download DB from miRBase for mature miRNAs
    db_hairpin_path = os.path.join(parent_dir, "files/hairpin.fa")  # Download DB from miRBase for hairpin miRNAs
    # Go to https://www.mirbase.org/ftp.shtml to download both previous datasets
    print("\nGetting Django models...")
    Mirna = apps.get_model(app_label='modulector', model_name='Mirna')
    MirbaseIdMirna = apps.get_model(app_label='modulector', model_name='MirbaseIdMirna')
    MirnaXGene = apps.get_model(app_label='modulector', model_name='MirnaXGene')
    num_mirna_records = Mirna.objects.all().count()
    num_mirnaxgen_records = MirnaXGene.objects.all().count()

    print(f"Removing old MirbaseIdMirna and MirnaXGene data (~{num_mirna_records * num_mirnaxgen_records} rows)...")
    with connection.cursor() as cursor:
        cursor.execute("TRUNCATE TABLE modulector_mirna CASCADE") # Deletes records from the modulector_mirna and modulector_mirnaxgen tables

    num_mirbaseidmirna_records = MirbaseIdMirna.objects.all().count()
    print(f"Removing old MirbaseIdMirna data ({num_mirbaseidmirna_records} rows)...")
    MirbaseIdMirna.objects.all().delete()

    print("Processing latest version of mature miRNAs FASTA file...")
    for item in read_fasta(db_mature_path):
        defline = item.defline
        if "Homo sapiens" in defline:
            data = defline.split(" ")
            mirbase_id = data[0]
            mimat_id = data[1]
            sequence = item.sequence
            Mirna.objects.create(mirna_code=mirbase_id, mirna_sequence=sequence)
            MirbaseIdMirna.objects.create(mirbase_accession_id=mimat_id, mature_mirna=mirbase_id)

    print("Processing latest version of hairpin miRNAs FASTA file...")
    for item in read_fasta(db_hairpin_path):
        defline = item.defline
        if "Homo sapiens" in defline:
            data = defline.split(" ")
            mirbase_id = data[0]
            mimat_id = data[1]
            MirbaseIdMirna.objects.create(mirbase_accession_id=mimat_id, mature_mirna=mirbase_id)


def import_mirdip(apps, _schema_editor):
    """It updates the mirDIP database in the table modulector_mirnaxgene. It also adds the miRNAs to the modulector_mirna table, without sequence, in case it is not found.
    Columns for file : files/mirDIP_Unidirectional_search_v.5.txt
        GENE_SYMBOL
        MICRORNA
        SOURCE_NUMBER
        INTEGRATED_RANK
        SOURCES
        SCORE_CLASS
    Example:
        "SPRYD3","hsa-miR-15a-5p",15,+9. 11060805626107E-001, "Cupid|MBStar|MirTar2|MultiMiTar|PACCMIT|bitargeting_May_2021|miRTar2GO|MirAncesTar|miranda_May_2021|mirbase|miRDB_v6|mirmap_May_2021|MiRNATIP|mirzag|TargetScan_v7_2", "V"
    """
    parent_dir = pathlib.Path(__file__).parent.absolute().parent
    mirdip_file_path = os.path.join(parent_dir, "files/mirDIP_Unidirectional_search_v.5.txt")

    print("\nGetting Django models...")
    MirnaXGene = apps.get_model(app_label='modulector', model_name='MirnaXGene')
    Mirna = apps.get_model(app_label='modulector', model_name='Mirna')
    MirnaSource = apps.get_model(app_label='modulector', model_name='MirnaSource')

    print("Removing mirDIP 4.1 data...")
    with connection.cursor() as cursor:
        cursor.execute("TRUNCATE TABLE modulector_mirnaxgen")

    print("Reading mirDIP 5.1 data...")
    mirdip_data = pd.read_csv(
        mirdip_file_path,
        header=None,
        names=['GENE_SYMBOL', 'MICRORNA', 'SOURCE_NUMBER', 'INTEGRATED_RANK', 'SOURCES', 'SCORE_CLASS']
    )

    print("Saving mirDIP data in the DB...")
    source = MirnaSource.objects.filter(name='mirdip')
    if not source:
        raise Exception("MirnaSource not found with name=mirdip in 'modulector_mirnasource' table")
    else:
        not_found_count = 0
        source_mirdip = source[0]  # If there would be more than one, either of the two could be assigned
        for idx, row in mirdip_data.iterrows():
            mirna_objects = Mirna.objects.filter(mirna_code=row['MICRORNA'])
            if mirna_objects:
                mo = mirna_objects[0]  # Will always be the [0] because mirna_code is unique in the Mirna data model.
            else:
                mo = Mirna.objects.create(mirna_code=row['MICRORNA'], mirna_sequence=None)
                not_found_count = not_found_count + 1

            MirnaXGene.objects.create(
                gene=row['GENE_SYMBOL'],
                score=row['INTEGRATED_RANK'],
                sources=row['SOURCES'],
                score_class=row['SCORE_CLASS'],
                mirna_source=source_mirdip,
                mirna=mo
            )

            if idx % 1000000 == 0:
                print(f'{datetime.now()}. Rows stored: {idx} of approximately 45 millions...')

    print("Loaded complete!")
    print(f'{not_found_count} miRNAs were found in mirDIP but not in mature miRBase miRNAs.')


class Migration(migrations.Migration):
    dependencies = [
        ('modulector', '0035_auto_20230112_2319'),
    ]

    operations = [
        migrations.RunPython(import_mirbase),
        migrations.RunPython(import_mirdip)
    ]
